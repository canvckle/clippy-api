type Query {
    profile: ProfileResponse
    quiz(eventId: String!): Quiz
    leaderboard: [ProfileResponse]
  }

  type Mutation {
    addUsername(username: String!): SetUsernameResponse
    answerQuestion(eventId: String! questionId: String!, answerId: String!): AnswerQuestionResponse
  }

  type Subscription {
    quizQuestionUpdated(eventId: String!): Quiz
  }

  type AnswerQuestionResponse {
    eventId: String
    questionId: String
    answerId: String
  }

  # Profile
  type ProfileResponse {
    username: String
    xp: Int
    answers: [Answers]
  }

  type Answers {
    answerId: String
    eventId: String
    questionId: String
  }

  type SetUsernameResponse {
    username: String
    error: String
  }

  # Picks
  enum EventState {
    PREGAME
    LIVE
    FINAL
  }

  type QuizMetadata {
    name: String!
    eventState: EventState!
  }

  type QuizOption {
    id: ID!
    name: String!
    totalAnswers: Int
  }

  type QuizQuestion {
    id: ID!
    name: String!
    options: [QuizOption]!
    correctAnswer: ID
    xp: Int!
    answerTime: Int
  }

  type Quiz {
    id: ID!
    metadata: QuizMetadata!
    questions: [QuizQuestion]!
  }